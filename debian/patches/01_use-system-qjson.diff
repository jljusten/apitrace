--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -257,23 +257,33 @@
 # - on unices to prevent symbol collisions when tracing applications that link
 # against other versions of these libraries
 
-set (ZLIB_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/zlib)
-set (ZLIB_LIBRARIES z_bundled)
-add_subdirectory (thirdparty/zlib)
-
+##################
+# Debian addendum:
+#
+# We statically link these into the tracers to prevent symbol collision, and
+# because it's unlikely to pose a worse security problem than being able to
+# LD_PRELOAD stuff anyway.
+#
+# We dynamically link the GUI and CLI tools against the system libraries, as
+# those tools are potentially exposed to untrustworthy data.
+
+find_package(PkgConfig REQUIRED)
+
+include(FindZLIB)
+find_package(ZLIB REQUIRED)
+find_library(ZLIB_STATIC_LIBRARIES libz.a)
 include_directories (${ZLIB_INCLUDE_DIRS})
 
-set (SNAPPY_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/snappy)
-set (SNAPPY_LIBRARIES snappy_bundled)
+# We can't use the system static library until its compiled with -fPIC
+set (SNAPPY_STATIC_LIBRARIES snappy_bundled)
 add_subdirectory (thirdparty/snappy)
 
+find_path(SNAPPY_INCLUDE_DIRS snappy.h)
+find_library(SNAPPY_LIBRARIES snappy)
+#find_library(SNAPPY_STATIC_LIBRARIES libsnappy.a)
 include_directories (${SNAPPY_INCLUDE_DIRS})
 
-set (PNG_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/libpng)
-set (PNG_DEFINITIONS "")
-set (PNG_LIBRARIES png_bundled)
-
-add_subdirectory (thirdparty/libpng)
+pkg_check_modules(PNG REQUIRED libpng12)
 
 if (MSVC)
     add_subdirectory (thirdparty/getopt)
@@ -287,27 +297,15 @@
 endif ()
 
 if (CMAKE_EXECUTABLE_FORMAT STREQUAL "ELF")
-    add_subdirectory (thirdparty/libbacktrace)
-    include_directories (${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/libbacktrace)
     set (LIBBACKTRACE_LIBRARIES dl backtrace)
     add_definitions (-DHAVE_BACKTRACE=1)
 endif ()
 
-add_subdirectory (thirdparty/md5)
-set (MD5_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty/md5)
-set (MD5_LIBRARIES md5_bundled)
-
-# Always use bundled QJSon.
-# - The packaged versions QJson are very old, and do not support NaN/Infinity.
-# - To make it easier to build the GUI on Windows and MacOSX, as there are no
-# binaries at all.
+find_library(MD5_LIBRARIES bsd)
+find_path(MD5_INCLUDE_DIR bsd/md5.h)
+
 if (QT4_FOUND)
-    add_definitions (-DQJSON_EXPORT=)
-    add_subdirectory (thirdparty/qjson)
-    set (QJSON_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/thirdparty)
-    set (QJSON_LIBRARY_DIRS)
-    set (QJSON_LIBRARIES qjson_bundled)
-    set (QJSON_FOUND TRUE)
+    find_package(QJSON REQUIRED)
 endif ()
 
 # We use bundled headers for all Khronos APIs, to guarantee support for both
--- a/image/image_md5.cpp
+++ b/image/image_md5.cpp
@@ -26,10 +26,14 @@
 
 
 #include <fstream>
+#include <stdint.h>
 #include "image.hpp"
 
 extern "C" {
-    #include "md5.h"
+    typedef uint8_t u_int8_t;
+    typedef uint32_t u_int32_t;
+    typedef uint64_t u_int64_t;
+    #include <bsd/md5.h>
 }
 
 
--- a/wrappers/CMakeLists.txt
+++ b/wrappers/CMakeLists.txt
@@ -405,8 +405,8 @@
     target_link_libraries (glxtrace
         glproc_gl
         common
-        ${ZLIB_LIBRARIES}
-        ${SNAPPY_LIBRARIES}
+        ${ZLIB_STATIC_LIBRARIES}
+        ${SNAPPY_STATIC_LIBRARIES}
         ${CMAKE_THREAD_LIBS_INIT}
         dl
     )
@@ -453,8 +453,8 @@
     target_link_libraries (egltrace
         glproc_egl
         common
-        ${ZLIB_LIBRARIES}
-        ${SNAPPY_LIBRARIES}
+        ${ZLIB_STATIC_LIBRARIES}
+        ${SNAPPY_STATIC_LIBRARIES}
         ${CMAKE_THREAD_LIBS_INIT}
         dl
     )
