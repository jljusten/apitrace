--- a/common/trace_file_zlib.cpp
+++ b/common/trace_file_zlib.cpp
@@ -31,13 +31,14 @@
 #include <string.h>
 
 #include <zlib.h>
-#include <gzguts.h>
 
 // for lseek
 #ifdef _WIN32
 #include <io.h>
 #else
 #include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
 #include <unistd.h>
 #endif
 
@@ -69,13 +70,15 @@
     virtual int  rawPercentRead();
 private:
     gzFile m_gzFile;
+    int fd;
     double m_endOffset;
 };
 
 ZLibFile::ZLibFile(const std::string &filename,
                    File::Mode mode)
     : File(filename, mode),
-      m_gzFile(NULL)
+      m_gzFile(NULL),
+      fd(-1)
 {
 }
 
@@ -86,18 +89,15 @@
 
 bool ZLibFile::rawOpen(const std::string &filename, File::Mode mode)
 {
-    m_gzFile = gzopen(filename.c_str(),
+    fd = ::open(filename.c_str(),
+                (mode == File::Write) ? O_WRONLY : O_RDONLY);
+    m_gzFile = gzdopen(fd,
                       (mode == File::Write) ? "wb" : "rb");
 
     if (mode == File::Read && m_gzFile) {
-        //XXX: unfortunately zlib doesn't support
-        //     SEEK_END or we could've done:
-        //m_endOffset = gzseek(m_gzFile, 0, SEEK_END);
-        //gzrewind(m_gzFile);
-        gz_state *state = (gz_state *)m_gzFile;
-        off_t loc = lseek(state->fd, 0, SEEK_CUR);
-        m_endOffset = lseek(state->fd, 0, SEEK_END);
-        lseek(state->fd, loc, SEEK_SET);
+        off_t loc = lseek(fd, 0, SEEK_CUR);
+        m_endOffset = lseek(fd, 0, SEEK_END);
+        lseek(fd, loc, SEEK_SET);
     }
 
     return m_gzFile != NULL;
@@ -149,11 +149,9 @@
 
 int ZLibFile::rawPercentRead()
 {
-    gz_state *state = (gz_state *)m_gzFile;
-    return int(100 * (lseek(state->fd, 0, SEEK_CUR) / m_endOffset));
+    return int(100 * (lseek(fd, 0, SEEK_CUR) / m_endOffset));
 }
 
-
 File * File::createZLib(void) {
     return new ZLibFile;
 }
